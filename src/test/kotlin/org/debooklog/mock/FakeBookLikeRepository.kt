package org.debooklog.mock

import org.debooklog.core.book.model.BookLike
import org.debooklog.core.bookshelf.port.BookLikeRepository

class FakeBookLikeRepository : BookLikeRepository {
    private var autoGeneratedId: Long = 0
    private val data: MutableList<BookLike> = mutableListOf()

    override fun save(bookLike: BookLike): BookLike {
        if (bookLike.id == 0L) {
            val newBookLike =
                BookLike(
                    id = ++autoGeneratedId,
                    bookId = bookLike.bookId,
                    memberId = bookLike.memberId,
                    createdAt = bookLike.createdAt,
                    updatedAt = bookLike.updatedAt,
                    deletedAt = bookLike.deletedAt,
                    isDeleted = bookLike.isDeleted,
                )
            data.add(newBookLike)
            return newBookLike
        } else {
            data.removeIf { it.id == bookLike.id }
            data.add(bookLike)
            return bookLike
        }
    }

    override fun existsByBookIdAndMemberId(
        bookId: Long,
        memberId: Long,
    ): Boolean {
        return data.firstOrNull { it.bookId == bookId && it.memberId == memberId } != null
    }

    override fun findByBookIdAndMemberId(
        bookId: Long,
        memberId: Long,
    ): BookLike? {
        return data.singleOrNull { it.bookId == bookId && it.memberId == memberId }
    }

    override fun findAllByBookIdIn(bookIds: List<Long>): List<BookLike> {
        return data.filter { it.bookId in bookIds }
    }
}

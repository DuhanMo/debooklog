package org.debooklog.debooklogserver.book.mock

import org.debooklog.debooklogserver.book.domain.Like
import org.debooklog.debooklogserver.bookshelf.service.port.LikeRepository

class FakeLikeRepository : LikeRepository {
    private var autoGeneratedId: Long = 0
    private val data: MutableList<Like> = mutableListOf()

    override fun save(like: Like): Like {
        if (like.id == null || like.id == 0L) {
            val newLike =
                Like(
                    id = ++autoGeneratedId,
                    bookId = like.bookId,
                    memberId = like.memberId,
                    createdAt = like.createdAt,
                    updatedAt = like.updatedAt,
                    deletedAt = like.deletedAt,
                    isDeleted = like.isDeleted,
                )
            data.add(newLike)
            return newLike
        } else {
            data.removeIf { it.id == like.id }
            data.add(like)
            return like
        }
    }

    override fun existsByBookIdAndMemberId(
        bookId: Long,
        memberId: Long,
    ): Boolean {
        return data.firstOrNull { it.bookId == bookId && it.memberId == memberId } != null
    }
}
